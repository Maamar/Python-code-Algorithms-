# type the following command in your terminal to install
# pip install networkx matplotlib

import heapq
import networkx as nx
import matplotlib.pyplot as plt


def input_graph():
    graph = {}
    all_vertices = set()
    edges = int(input("Enter the number of edges: "))
    print("Enter the edges in the format 'u v weight' (without quotes), each on a new line:")
    for _ in range(edges):
        u, v, weight = input().split()
        weight = float(weight)
        if u not in graph:
            graph[u] = []
        graph[u].append((v, weight))
        all_vertices.update([u, v])
    return graph, all_vertices


def dijkstra(graph, all_vertices, start):
    distances = {vertex: float('infinity') for vertex in all_vertices}
    distances[start] = 0
    queue = [(0, start)]

    while queue:
        current_distance, current_vertex = heapq.heappop(queue)

        if current_vertex not in graph:
            continue

        for neighbor, weight in graph[current_vertex]:
            distance = current_distance + weight
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(queue, (distance, neighbor))

    return distances


def display_network(graph, all_vertices, shortest_paths, start):
    G = nx.DiGraph()
    for u in graph:
        for v, weight in graph[u]:
            G.add_edge(u, v, weight=weight)

    pos = nx.spring_layout(G)  # positions for all nodes
    nx.draw_networkx_nodes(G, pos, node_size=700)
    nx.draw_networkx_edges(G, pos, width=2)
    nx.draw_networkx_labels(G, pos, font_size=20, font_family="sans-serif")

    edge_labels = dict([((u, v,), d['weight'])
                        for u, v, d in G.edges(data=True)])
    nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels)

    # Highlight the shortest paths from start
    for vertex, distance in shortest_paths.items():
        if vertex != start:
            nx.draw_networkx_nodes(G, pos, nodelist=[vertex], node_color='r', node_size=700)

    plt.title('Network Graph')
    plt.axis('off')
    plt.show()


def main():
    print("Dijkstra's Algorithm for Computing Shortest Paths")
    graph, all_vertices = input_graph()
    start = input("Enter the source vertex: ")
    if start not in all_vertices:
        print("The source vertex is not in the graph.")
        return
    shortest_paths = dijkstra(graph, all_vertices, start)
    print("Shortest paths from vertex " + start + ":")
    for vertex, distance in shortest_paths.items():
        print(f"Distance to {vertex}: {distance}")

    display_network(graph, all_vertices, shortest_paths, start)


if __name__ == "__main__":
    main()
